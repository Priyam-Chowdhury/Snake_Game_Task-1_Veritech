import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
//Created by Priyam Chowdhury
public class SnakeGame extends JPanel implements KeyListener, ActionListener {
    
    private final int BOX_SIZE = 20;
    private final int GAME_WIDTH = 30;
    private final int GAME_HEIGHT = 20;
    private final int INITIAL_SNAKE_LENGTH = 3;
    private final int DELAY = 100; // in milliseconds
    
  private ArrayList<Point> snake;
    private Point food;
    private char direction;
    private javax.swing.Timer timer; // Change here
    private boolean isGameOver;
    
    public SnakeGame() {
      setPreferredSize(new Dimension(BOX_SIZE * GAME_WIDTH, BOX_SIZE * GAME_HEIGHT));
        setBackground(Color.BLACK);
        setFocusable(true);
        addKeyListener(this);
        
        snake = new ArrayList<>();
        direction = 'R'; // Start moving right initially
        isGameOver = false;
        
        initializeSnake();
        placeFood();
        
        timer = new javax.swing.Timer(DELAY, this); // Change here
        timer.start();
    }
    
    private void initializeSnake() {
        int x = GAME_WIDTH / 2;
        int y = GAME_HEIGHT / 2;
        for (int i = 0; i < INITIAL_SNAKE_LENGTH; i++) {
            snake.add(new Point(x - i, y));
        }
    }
    
    private void placeFood() {
        Random rand = new Random();
        int x = rand.nextInt(GAME_WIDTH);
        int y = rand.nextInt(GAME_HEIGHT);
        food = new Point(x, y);
    }
    
    private void move() {
        Point head = snake.get(0);
        Point newHead = new Point(head);
        
        switch (direction) {
            case 'U':
                newHead.y--;
                break;
            case 'D':
                newHead.y++;
                break;
            case 'L':
                newHead.x--;
                break;
            case 'R':
                newHead.x++;
                break;
        }
        
        snake.add(0, newHead);
        if (!newHead.equals(food)) {
            snake.remove(snake.size() - 1);
        } else {
            placeFood();
        }
        
        if (isGameOver()) {
            isGameOver = true;
            timer.stop();
        }
        
        repaint();
    }
    
    private boolean isGameOver() {
        Point head = snake.get(0);
        
        // Check if snake hits the wall
        if (head.x < 0 || head.x >= GAME_WIDTH || head.y < 0 || head.y >= GAME_HEIGHT) {
            return true;
        }
        
        // Check if snake hits itself
        for (int i = 1; i < snake.size(); i++) {
            if (head.equals(snake.get(i))) {
                return true;
            }
        }
        
        return false;
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        // Draw snake
        g.setColor(Color.GREEN);
        for (Point point : snake) {
            g.fillRect(point.x * BOX_SIZE, point.y * BOX_SIZE, BOX_SIZE, BOX_SIZE);
        }
        
        // Draw food
        g.setColor(Color.RED);
        g.fillRect(food.x * BOX_SIZE, food.y * BOX_SIZE, BOX_SIZE, BOX_SIZE);
        
        if (isGameOver) {
            g.setColor(Color.WHITE);
            g.setFont(new Font("Arial", Font.BOLD, 40));
            g.drawString("Game Over", BOX_SIZE * GAME_WIDTH / 2 - 120, BOX_SIZE * GAME_HEIGHT / 2);
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        move();
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
        int keyCode = e.getKeyCode();
        
        switch (keyCode) {
            case KeyEvent.VK_UP:
                if (direction != 'D') direction = 'U';
                break;
            case KeyEvent.VK_DOWN:
                if (direction != 'U') direction = 'D';
                break;
            case KeyEvent.VK_LEFT:
                if (direction != 'R') direction = 'L';
                break;
            case KeyEvent.VK_RIGHT:
                if (direction != 'L') direction = 'R';
                break;
        }
    }
    
    @Override
    public void keyTyped(KeyEvent e) {}
    
    @Override
    public void keyReleased(KeyEvent e) {}
    
    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new SnakeGame());
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
